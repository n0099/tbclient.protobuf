// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Post/Thread.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TbClient.Post {

  /// <summary>Holder for reflection information generated from Post/Thread.proto</summary>
  public static partial class ThreadReflection {

    #region Descriptor
    /// <summary>File descriptor for Post/Thread.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ThreadReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQb3N0L1RocmVhZC5wcm90bxINdGJDbGllbnQucG9zdBoKVXNlci5wcm90",
            "bxoPSXRlbS9JdGVtLnByb3RvGhBQb3N0L1JlcGx5LnByb3RvGhVQb3N0L0Nv",
            "bW1vbi9aYW4ucHJvdG8aFVBvc3QvQ29tbW9uL0xicy5wcm90bxoXUG9zdC9D",
            "b21tb24vQWdyZWUucHJvdG8aGlBvc3QvQ29tbW9uL1BvbGxJbmZvLnByb3Rv",
            "Gh1Qb3N0L1JlcGx5RGVwcy9UYWlsSW5mby5wcm90byKiDQoGVGhyZWFkEgsK",
            "A3RpZBgCIAEoAxINCgV0aXRsZRgDIAEoCRIRCglyZXBseV9udW0YBCABKAUS",
            "EAoIdmlld19udW0YBSABKAUSEQoJbGFzdF90aW1lGAYgASgJEhUKDWxhc3Rf",
            "dGltZV9pbnQYByABKAUSFAoMdGhyZWFkX3R5cGVzGAggASgFEg4KBmlzX3Rv",
            "cBgJIAEoBRIPCgdpc19nb29kGAogASgFEg8KB2lzX3ZvdGUYCyABKAUSEAoI",
            "aXNfYmFrYW4YDCABKAUSEQoJaXNfcHJvdGFsGA0gASgFEhEKCWlzX21laXpo",
            "aRgOIAEoBRIXCg9pc192b2ljZV90aHJlYWQYDyABKAUSEwoLaXNfYWN0aXZp",
            "dHkYECABKAUSEQoJaXNfbm90aWNlGBEgASgFEh4KBmF1dGhvchgSIAEoCzIO",
            "LnRiQ2xpZW50LlVzZXISJAoMbGFzdF9yZXBseWVyGBMgASgLMg4udGJDbGll",
            "bnQuVXNlchITCgtjb21tZW50X251bRgUIAEoBRISCgptZWl6aGlfcGljGBgg",
            "ASgJEgsKA2ZpZBgbIAEoAxINCgVmbmFtZRgcIAEoCRIWCg5saXZlX3Bvc3Rf",
            "dHlwZRgdIAEoCRIVCg1maXJzdF9wb3N0X2lkGCggASgDEiYKA3phbhgpIAEo",
            "CzIZLnRiQ2xpZW50LnBvc3QuY29tbW9uLlphbhIVCg1pc19nbG9iYWxfdG9w",
            "GCogASgFEhMKC2NyZWF0ZV90aW1lGC0gASgFEhIKCnJlcG9zdF9udW0YLiAB",
            "KAUSKgoFdG9waWMYLyABKAsyGy50YkNsaWVudC5wb3N0LlRocmVhZC5Ub3Bp",
            "YxIVCg1oYXNfY29tbWVudGVkGDAgASgFEgwKBGZyb20YMSABKAkSDwoHcG9z",
            "dF9pZBg0IAEoAxIMCgR0aW1lGDUgASgFEhQKDGlzX21lbWJlcnRvcBg2IAEo",
            "BRIRCglhdXRob3JfaWQYOCABKAMSFgoOdmFsaWRfcG9zdF9udW0YOSABKA0S",
            "FQoNaXNMekRlbGV0ZUFsbBg6IAEoDRINCgVpc19hZBg7IAEoDRIMCgRlY29t",
            "GDwgASgJEgwKBHBpZHMYPSABKAkSKwoIbG9jYXRpb24YPiABKAsyGS50YkNs",
            "aWVudC5wb3N0LmNvbW1vbi5MYnMSEAoIcG9zdF9udW0YRSABKAUSFQoNY2F0",
            "ZWdvcnlfbmFtZRhJIAEoCRIxCglwb2xsX2luZm8YSiABKAsyHi50YkNsaWVu",
            "dC5wb3N0LmNvbW1vbi5Qb2xsSW5mbxIQCghpc19ub3ZlbBhMIAEoBRIWCg5p",
            "c19ub3ZlbF90aGFuaxhNIAEoBRIXCg9pc19ub3ZlbF9yZXdhcmQYTiABKAUS",
            "FQoNaXNfY29weXRocmVhZBhRIAEoDRIVCg1vcGVyYXRvcl9mbGFnGFIgASgN",
            "Eg8KB3BpY19udW0YVCABKA0SHgoWaXNfZ29kdGhyZWFkX3JlY29tbWVuZBhV",
            "IAEoBRI0CglleHRfdGFpbHMYWiADKAsyIS50YkNsaWVudC5wb3N0LnJlcGx5",
            "RGVwcy5UYWlsSW5mbxIcChRpc19tdWx0aWZvcnVtX3RocmVhZBh7IAEoBRIR",
            "CglhZ3JlZV9udW0YfCABKAUSLAoOdG9wX2FncmVlX3Bvc3QYfSABKAsyFC50",
            "YkNsaWVudC5wb3N0LlJlcGx5EioKBWFncmVlGH4gASgLMhsudGJDbGllbnQu",
            "cG9zdC5jb21tb24uQWdyZWUSGgoSaXNfcGFydGlhbF92aXNpYmxlGH8gASgF",
            "EhcKDmlzX2xpbmtfdGhyZWFkGIABIAEoBRIRCghmcmVxX251bRiCASABKAMS",
            "DwoGaXNfZ29kGIMBIAEoBRISCglzaGFyZV9udW0YhwEgASgDEhgKD2lzX3No",
            "YXJlX3RocmVhZBiPASABKAUSEQoIaXNfdG9waWMYlAEgASgFEhgKD3RvcGlj",
            "X3VzZXJfbmFtZRiVASABKAkSFQoMdG9waWNfaDVfdXJsGJYBIAEoCRIbChJw",
            "cmVzZW50YXRpb25fc3R5bGUYlwEgASgJEg8KBnRhYl9pZBivASABKAUSEQoI",
            "dGFiX25hbWUYsAEgASgJEiIKBGl0ZW0YswEgASgLMhMudGJDbGllbnQuaXRl",
            "bS5JdGVtGjsKBVRvcGljEhAKCGlzX2xwb3N0GAEgASgFEhIKCnRvcGljX3R5",
            "cGUYAiABKAUSDAoEbGluaxgDIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::TbClient.UserReflection.Descriptor, global::TbClient.Item.ItemReflection.Descriptor, global::TbClient.Post.ReplyReflection.Descriptor, global::TbClient.Post.Common.ZanReflection.Descriptor, global::TbClient.Post.Common.LbsReflection.Descriptor, global::TbClient.Post.Common.AgreeReflection.Descriptor, global::TbClient.Post.Common.PollInfoReflection.Descriptor, global::TbClient.Post.ReplyDeps.TailInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TbClient.Post.Thread), global::TbClient.Post.Thread.Parser, new[]{ "Tid", "Title", "ReplyNum", "ViewNum", "LastTime", "LastTimeInt", "ThreadTypes", "IsTop", "IsGood", "IsVote", "IsBakan", "IsProtal", "IsMeizhi", "IsVoiceThread", "IsActivity", "IsNotice", "Author", "LastReplyer", "CommentNum", "MeizhiPic", "Fid", "Fname", "LivePostType", "FirstPostId", "Zan", "IsGlobalTop", "CreateTime", "RepostNum", "Topic", "HasCommented", "From", "PostId", "Time", "IsMembertop", "AuthorId", "ValidPostNum", "IsLzDeleteAll", "IsAd", "Ecom", "Pids", "Location", "PostNum", "CategoryName", "PollInfo", "IsNovel", "IsNovelThank", "IsNovelReward", "IsCopythread", "OperatorFlag", "PicNum", "IsGodthreadRecommend", "ExtTails", "IsMultiforumThread", "AgreeNum", "TopAgreePost", "Agree", "IsPartialVisible", "IsLinkThread", "FreqNum", "IsGod", "ShareNum", "IsShareThread", "IsTopic", "TopicUserName", "TopicH5Url", "PresentationStyle", "TabId", "TabName", "Item" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::TbClient.Post.Thread.Types.Topic), global::TbClient.Post.Thread.Types.Topic.Parser, new[]{ "IsLpost", "TopicType", "Link" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Thread : pb::IMessage<Thread>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Thread> _parser = new pb::MessageParser<Thread>(() => new Thread());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Thread> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TbClient.Post.ThreadReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Thread() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Thread(Thread other) : this() {
      tid_ = other.tid_;
      title_ = other.title_;
      replyNum_ = other.replyNum_;
      viewNum_ = other.viewNum_;
      lastTime_ = other.lastTime_;
      lastTimeInt_ = other.lastTimeInt_;
      threadTypes_ = other.threadTypes_;
      isTop_ = other.isTop_;
      isGood_ = other.isGood_;
      isVote_ = other.isVote_;
      isBakan_ = other.isBakan_;
      isProtal_ = other.isProtal_;
      isMeizhi_ = other.isMeizhi_;
      isVoiceThread_ = other.isVoiceThread_;
      isActivity_ = other.isActivity_;
      isNotice_ = other.isNotice_;
      author_ = other.author_ != null ? other.author_.Clone() : null;
      lastReplyer_ = other.lastReplyer_ != null ? other.lastReplyer_.Clone() : null;
      commentNum_ = other.commentNum_;
      meizhiPic_ = other.meizhiPic_;
      fid_ = other.fid_;
      fname_ = other.fname_;
      livePostType_ = other.livePostType_;
      firstPostId_ = other.firstPostId_;
      zan_ = other.zan_ != null ? other.zan_.Clone() : null;
      isGlobalTop_ = other.isGlobalTop_;
      createTime_ = other.createTime_;
      repostNum_ = other.repostNum_;
      topic_ = other.topic_ != null ? other.topic_.Clone() : null;
      hasCommented_ = other.hasCommented_;
      from_ = other.from_;
      postId_ = other.postId_;
      time_ = other.time_;
      isMembertop_ = other.isMembertop_;
      authorId_ = other.authorId_;
      validPostNum_ = other.validPostNum_;
      isLzDeleteAll_ = other.isLzDeleteAll_;
      isAd_ = other.isAd_;
      ecom_ = other.ecom_;
      pids_ = other.pids_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      postNum_ = other.postNum_;
      categoryName_ = other.categoryName_;
      pollInfo_ = other.pollInfo_ != null ? other.pollInfo_.Clone() : null;
      isNovel_ = other.isNovel_;
      isNovelThank_ = other.isNovelThank_;
      isNovelReward_ = other.isNovelReward_;
      isCopythread_ = other.isCopythread_;
      operatorFlag_ = other.operatorFlag_;
      picNum_ = other.picNum_;
      isGodthreadRecommend_ = other.isGodthreadRecommend_;
      extTails_ = other.extTails_.Clone();
      isMultiforumThread_ = other.isMultiforumThread_;
      agreeNum_ = other.agreeNum_;
      topAgreePost_ = other.topAgreePost_ != null ? other.topAgreePost_.Clone() : null;
      agree_ = other.agree_ != null ? other.agree_.Clone() : null;
      isPartialVisible_ = other.isPartialVisible_;
      isLinkThread_ = other.isLinkThread_;
      freqNum_ = other.freqNum_;
      isGod_ = other.isGod_;
      shareNum_ = other.shareNum_;
      isShareThread_ = other.isShareThread_;
      isTopic_ = other.isTopic_;
      topicUserName_ = other.topicUserName_;
      topicH5Url_ = other.topicH5Url_;
      presentationStyle_ = other.presentationStyle_;
      tabId_ = other.tabId_;
      tabName_ = other.tabName_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Thread Clone() {
      return new Thread(this);
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 2;
    private long tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reply_num" field.</summary>
    public const int ReplyNumFieldNumber = 4;
    private int replyNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReplyNum {
      get { return replyNum_; }
      set {
        replyNum_ = value;
      }
    }

    /// <summary>Field number for the "view_num" field.</summary>
    public const int ViewNumFieldNumber = 5;
    private int viewNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ViewNum {
      get { return viewNum_; }
      set {
        viewNum_ = value;
      }
    }

    /// <summary>Field number for the "last_time" field.</summary>
    public const int LastTimeFieldNumber = 6;
    private string lastTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_time_int" field.</summary>
    public const int LastTimeIntFieldNumber = 7;
    private int lastTimeInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LastTimeInt {
      get { return lastTimeInt_; }
      set {
        lastTimeInt_ = value;
      }
    }

    /// <summary>Field number for the "thread_types" field.</summary>
    public const int ThreadTypesFieldNumber = 8;
    private int threadTypes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThreadTypes {
      get { return threadTypes_; }
      set {
        threadTypes_ = value;
      }
    }

    /// <summary>Field number for the "is_top" field.</summary>
    public const int IsTopFieldNumber = 9;
    private int isTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsTop {
      get { return isTop_; }
      set {
        isTop_ = value;
      }
    }

    /// <summary>Field number for the "is_good" field.</summary>
    public const int IsGoodFieldNumber = 10;
    private int isGood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsGood {
      get { return isGood_; }
      set {
        isGood_ = value;
      }
    }

    /// <summary>Field number for the "is_vote" field.</summary>
    public const int IsVoteFieldNumber = 11;
    private int isVote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsVote {
      get { return isVote_; }
      set {
        isVote_ = value;
      }
    }

    /// <summary>Field number for the "is_bakan" field.</summary>
    public const int IsBakanFieldNumber = 12;
    private int isBakan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsBakan {
      get { return isBakan_; }
      set {
        isBakan_ = value;
      }
    }

    /// <summary>Field number for the "is_protal" field.</summary>
    public const int IsProtalFieldNumber = 13;
    private int isProtal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsProtal {
      get { return isProtal_; }
      set {
        isProtal_ = value;
      }
    }

    /// <summary>Field number for the "is_meizhi" field.</summary>
    public const int IsMeizhiFieldNumber = 14;
    private int isMeizhi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsMeizhi {
      get { return isMeizhi_; }
      set {
        isMeizhi_ = value;
      }
    }

    /// <summary>Field number for the "is_voice_thread" field.</summary>
    public const int IsVoiceThreadFieldNumber = 15;
    private int isVoiceThread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsVoiceThread {
      get { return isVoiceThread_; }
      set {
        isVoiceThread_ = value;
      }
    }

    /// <summary>Field number for the "is_activity" field.</summary>
    public const int IsActivityFieldNumber = 16;
    private int isActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsActivity {
      get { return isActivity_; }
      set {
        isActivity_ = value;
      }
    }

    /// <summary>Field number for the "is_notice" field.</summary>
    public const int IsNoticeFieldNumber = 17;
    private int isNotice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsNotice {
      get { return isNotice_; }
      set {
        isNotice_ = value;
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 18;
    private global::TbClient.User author_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TbClient.User Author {
      get { return author_; }
      set {
        author_ = value;
      }
    }

    /// <summary>Field number for the "last_replyer" field.</summary>
    public const int LastReplyerFieldNumber = 19;
    private global::TbClient.User lastReplyer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TbClient.User LastReplyer {
      get { return lastReplyer_; }
      set {
        lastReplyer_ = value;
      }
    }

    /// <summary>Field number for the "comment_num" field.</summary>
    public const int CommentNumFieldNumber = 20;
    private int commentNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CommentNum {
      get { return commentNum_; }
      set {
        commentNum_ = value;
      }
    }

    /// <summary>Field number for the "meizhi_pic" field.</summary>
    public const int MeizhiPicFieldNumber = 24;
    private string meizhiPic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeizhiPic {
      get { return meizhiPic_; }
      set {
        meizhiPic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 27;
    private long fid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Fid {
      get { return fid_; }
      set {
        fid_ = value;
      }
    }

    /// <summary>Field number for the "fname" field.</summary>
    public const int FnameFieldNumber = 28;
    private string fname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Fname {
      get { return fname_; }
      set {
        fname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "live_post_type" field.</summary>
    public const int LivePostTypeFieldNumber = 29;
    private string livePostType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LivePostType {
      get { return livePostType_; }
      set {
        livePostType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_post_id" field.</summary>
    public const int FirstPostIdFieldNumber = 40;
    private long firstPostId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FirstPostId {
      get { return firstPostId_; }
      set {
        firstPostId_ = value;
      }
    }

    /// <summary>Field number for the "zan" field.</summary>
    public const int ZanFieldNumber = 41;
    private global::TbClient.Post.Common.Zan zan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TbClient.Post.Common.Zan Zan {
      get { return zan_; }
      set {
        zan_ = value;
      }
    }

    /// <summary>Field number for the "is_global_top" field.</summary>
    public const int IsGlobalTopFieldNumber = 42;
    private int isGlobalTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsGlobalTop {
      get { return isGlobalTop_; }
      set {
        isGlobalTop_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 45;
    private int createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "repost_num" field.</summary>
    public const int RepostNumFieldNumber = 46;
    private int repostNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RepostNum {
      get { return repostNum_; }
      set {
        repostNum_ = value;
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 47;
    private global::TbClient.Post.Thread.Types.Topic topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TbClient.Post.Thread.Types.Topic Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "has_commented" field.</summary>
    public const int HasCommentedFieldNumber = 48;
    private int hasCommented_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HasCommented {
      get { return hasCommented_; }
      set {
        hasCommented_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 49;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "post_id" field.</summary>
    public const int PostIdFieldNumber = 52;
    private long postId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PostId {
      get { return postId_; }
      set {
        postId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 53;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "is_membertop" field.</summary>
    public const int IsMembertopFieldNumber = 54;
    private int isMembertop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsMembertop {
      get { return isMembertop_; }
      set {
        isMembertop_ = value;
      }
    }

    /// <summary>Field number for the "author_id" field.</summary>
    public const int AuthorIdFieldNumber = 56;
    private long authorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    /// <summary>Field number for the "valid_post_num" field.</summary>
    public const int ValidPostNumFieldNumber = 57;
    private uint validPostNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ValidPostNum {
      get { return validPostNum_; }
      set {
        validPostNum_ = value;
      }
    }

    /// <summary>Field number for the "isLzDeleteAll" field.</summary>
    public const int IsLzDeleteAllFieldNumber = 58;
    private uint isLzDeleteAll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint IsLzDeleteAll {
      get { return isLzDeleteAll_; }
      set {
        isLzDeleteAll_ = value;
      }
    }

    /// <summary>Field number for the "is_ad" field.</summary>
    public const int IsAdFieldNumber = 59;
    private uint isAd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint IsAd {
      get { return isAd_; }
      set {
        isAd_ = value;
      }
    }

    /// <summary>Field number for the "ecom" field.</summary>
    public const int EcomFieldNumber = 60;
    private string ecom_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ecom {
      get { return ecom_; }
      set {
        ecom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pids" field.</summary>
    public const int PidsFieldNumber = 61;
    private string pids_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pids {
      get { return pids_; }
      set {
        pids_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 62;
    private global::TbClient.Post.Common.Lbs location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TbClient.Post.Common.Lbs Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "post_num" field.</summary>
    public const int PostNumFieldNumber = 69;
    private int postNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PostNum {
      get { return postNum_; }
      set {
        postNum_ = value;
      }
    }

    /// <summary>Field number for the "category_name" field.</summary>
    public const int CategoryNameFieldNumber = 73;
    private string categoryName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CategoryName {
      get { return categoryName_; }
      set {
        categoryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "poll_info" field.</summary>
    public const int PollInfoFieldNumber = 74;
    private global::TbClient.Post.Common.PollInfo pollInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TbClient.Post.Common.PollInfo PollInfo {
      get { return pollInfo_; }
      set {
        pollInfo_ = value;
      }
    }

    /// <summary>Field number for the "is_novel" field.</summary>
    public const int IsNovelFieldNumber = 76;
    private int isNovel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsNovel {
      get { return isNovel_; }
      set {
        isNovel_ = value;
      }
    }

    /// <summary>Field number for the "is_novel_thank" field.</summary>
    public const int IsNovelThankFieldNumber = 77;
    private int isNovelThank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsNovelThank {
      get { return isNovelThank_; }
      set {
        isNovelThank_ = value;
      }
    }

    /// <summary>Field number for the "is_novel_reward" field.</summary>
    public const int IsNovelRewardFieldNumber = 78;
    private int isNovelReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsNovelReward {
      get { return isNovelReward_; }
      set {
        isNovelReward_ = value;
      }
    }

    /// <summary>Field number for the "is_copythread" field.</summary>
    public const int IsCopythreadFieldNumber = 81;
    private uint isCopythread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint IsCopythread {
      get { return isCopythread_; }
      set {
        isCopythread_ = value;
      }
    }

    /// <summary>Field number for the "operator_flag" field.</summary>
    public const int OperatorFlagFieldNumber = 82;
    private uint operatorFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OperatorFlag {
      get { return operatorFlag_; }
      set {
        operatorFlag_ = value;
      }
    }

    /// <summary>Field number for the "pic_num" field.</summary>
    public const int PicNumFieldNumber = 84;
    private uint picNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PicNum {
      get { return picNum_; }
      set {
        picNum_ = value;
      }
    }

    /// <summary>Field number for the "is_godthread_recommend" field.</summary>
    public const int IsGodthreadRecommendFieldNumber = 85;
    private int isGodthreadRecommend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsGodthreadRecommend {
      get { return isGodthreadRecommend_; }
      set {
        isGodthreadRecommend_ = value;
      }
    }

    /// <summary>Field number for the "ext_tails" field.</summary>
    public const int ExtTailsFieldNumber = 90;
    private static readonly pb::FieldCodec<global::TbClient.Post.ReplyDeps.TailInfo> _repeated_extTails_codec
        = pb::FieldCodec.ForMessage(722, global::TbClient.Post.ReplyDeps.TailInfo.Parser);
    private readonly pbc::RepeatedField<global::TbClient.Post.ReplyDeps.TailInfo> extTails_ = new pbc::RepeatedField<global::TbClient.Post.ReplyDeps.TailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TbClient.Post.ReplyDeps.TailInfo> ExtTails {
      get { return extTails_; }
    }

    /// <summary>Field number for the "is_multiforum_thread" field.</summary>
    public const int IsMultiforumThreadFieldNumber = 123;
    private int isMultiforumThread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsMultiforumThread {
      get { return isMultiforumThread_; }
      set {
        isMultiforumThread_ = value;
      }
    }

    /// <summary>Field number for the "agree_num" field.</summary>
    public const int AgreeNumFieldNumber = 124;
    private int agreeNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AgreeNum {
      get { return agreeNum_; }
      set {
        agreeNum_ = value;
      }
    }

    /// <summary>Field number for the "top_agree_post" field.</summary>
    public const int TopAgreePostFieldNumber = 125;
    private global::TbClient.Post.Reply topAgreePost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TbClient.Post.Reply TopAgreePost {
      get { return topAgreePost_; }
      set {
        topAgreePost_ = value;
      }
    }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 126;
    private global::TbClient.Post.Common.Agree agree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TbClient.Post.Common.Agree Agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    /// <summary>Field number for the "is_partial_visible" field.</summary>
    public const int IsPartialVisibleFieldNumber = 127;
    private int isPartialVisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsPartialVisible {
      get { return isPartialVisible_; }
      set {
        isPartialVisible_ = value;
      }
    }

    /// <summary>Field number for the "is_link_thread" field.</summary>
    public const int IsLinkThreadFieldNumber = 128;
    private int isLinkThread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsLinkThread {
      get { return isLinkThread_; }
      set {
        isLinkThread_ = value;
      }
    }

    /// <summary>Field number for the "freq_num" field.</summary>
    public const int FreqNumFieldNumber = 130;
    private long freqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FreqNum {
      get { return freqNum_; }
      set {
        freqNum_ = value;
      }
    }

    /// <summary>Field number for the "is_god" field.</summary>
    public const int IsGodFieldNumber = 131;
    private int isGod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsGod {
      get { return isGod_; }
      set {
        isGod_ = value;
      }
    }

    /// <summary>Field number for the "share_num" field.</summary>
    public const int ShareNumFieldNumber = 135;
    private long shareNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ShareNum {
      get { return shareNum_; }
      set {
        shareNum_ = value;
      }
    }

    /// <summary>Field number for the "is_share_thread" field.</summary>
    public const int IsShareThreadFieldNumber = 143;
    private int isShareThread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsShareThread {
      get { return isShareThread_; }
      set {
        isShareThread_ = value;
      }
    }

    /// <summary>Field number for the "is_topic" field.</summary>
    public const int IsTopicFieldNumber = 148;
    private int isTopic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsTopic {
      get { return isTopic_; }
      set {
        isTopic_ = value;
      }
    }

    /// <summary>Field number for the "topic_user_name" field.</summary>
    public const int TopicUserNameFieldNumber = 149;
    private string topicUserName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TopicUserName {
      get { return topicUserName_; }
      set {
        topicUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic_h5_url" field.</summary>
    public const int TopicH5UrlFieldNumber = 150;
    private string topicH5Url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TopicH5Url {
      get { return topicH5Url_; }
      set {
        topicH5Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presentation_style" field.</summary>
    public const int PresentationStyleFieldNumber = 151;
    private string presentationStyle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PresentationStyle {
      get { return presentationStyle_; }
      set {
        presentationStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tab_id" field.</summary>
    public const int TabIdFieldNumber = 175;
    private int tabId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TabId {
      get { return tabId_; }
      set {
        tabId_ = value;
      }
    }

    /// <summary>Field number for the "tab_name" field.</summary>
    public const int TabNameFieldNumber = 176;
    private string tabName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TabName {
      get { return tabName_; }
      set {
        tabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 179;
    private global::TbClient.Item.Item item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TbClient.Item.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Thread);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Thread other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tid != other.Tid) return false;
      if (Title != other.Title) return false;
      if (ReplyNum != other.ReplyNum) return false;
      if (ViewNum != other.ViewNum) return false;
      if (LastTime != other.LastTime) return false;
      if (LastTimeInt != other.LastTimeInt) return false;
      if (ThreadTypes != other.ThreadTypes) return false;
      if (IsTop != other.IsTop) return false;
      if (IsGood != other.IsGood) return false;
      if (IsVote != other.IsVote) return false;
      if (IsBakan != other.IsBakan) return false;
      if (IsProtal != other.IsProtal) return false;
      if (IsMeizhi != other.IsMeizhi) return false;
      if (IsVoiceThread != other.IsVoiceThread) return false;
      if (IsActivity != other.IsActivity) return false;
      if (IsNotice != other.IsNotice) return false;
      if (!object.Equals(Author, other.Author)) return false;
      if (!object.Equals(LastReplyer, other.LastReplyer)) return false;
      if (CommentNum != other.CommentNum) return false;
      if (MeizhiPic != other.MeizhiPic) return false;
      if (Fid != other.Fid) return false;
      if (Fname != other.Fname) return false;
      if (LivePostType != other.LivePostType) return false;
      if (FirstPostId != other.FirstPostId) return false;
      if (!object.Equals(Zan, other.Zan)) return false;
      if (IsGlobalTop != other.IsGlobalTop) return false;
      if (CreateTime != other.CreateTime) return false;
      if (RepostNum != other.RepostNum) return false;
      if (!object.Equals(Topic, other.Topic)) return false;
      if (HasCommented != other.HasCommented) return false;
      if (From != other.From) return false;
      if (PostId != other.PostId) return false;
      if (Time != other.Time) return false;
      if (IsMembertop != other.IsMembertop) return false;
      if (AuthorId != other.AuthorId) return false;
      if (ValidPostNum != other.ValidPostNum) return false;
      if (IsLzDeleteAll != other.IsLzDeleteAll) return false;
      if (IsAd != other.IsAd) return false;
      if (Ecom != other.Ecom) return false;
      if (Pids != other.Pids) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (PostNum != other.PostNum) return false;
      if (CategoryName != other.CategoryName) return false;
      if (!object.Equals(PollInfo, other.PollInfo)) return false;
      if (IsNovel != other.IsNovel) return false;
      if (IsNovelThank != other.IsNovelThank) return false;
      if (IsNovelReward != other.IsNovelReward) return false;
      if (IsCopythread != other.IsCopythread) return false;
      if (OperatorFlag != other.OperatorFlag) return false;
      if (PicNum != other.PicNum) return false;
      if (IsGodthreadRecommend != other.IsGodthreadRecommend) return false;
      if(!extTails_.Equals(other.extTails_)) return false;
      if (IsMultiforumThread != other.IsMultiforumThread) return false;
      if (AgreeNum != other.AgreeNum) return false;
      if (!object.Equals(TopAgreePost, other.TopAgreePost)) return false;
      if (!object.Equals(Agree, other.Agree)) return false;
      if (IsPartialVisible != other.IsPartialVisible) return false;
      if (IsLinkThread != other.IsLinkThread) return false;
      if (FreqNum != other.FreqNum) return false;
      if (IsGod != other.IsGod) return false;
      if (ShareNum != other.ShareNum) return false;
      if (IsShareThread != other.IsShareThread) return false;
      if (IsTopic != other.IsTopic) return false;
      if (TopicUserName != other.TopicUserName) return false;
      if (TopicH5Url != other.TopicH5Url) return false;
      if (PresentationStyle != other.PresentationStyle) return false;
      if (TabId != other.TabId) return false;
      if (TabName != other.TabName) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Tid != 0L) hash ^= Tid.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (ReplyNum != 0) hash ^= ReplyNum.GetHashCode();
      if (ViewNum != 0) hash ^= ViewNum.GetHashCode();
      if (LastTime.Length != 0) hash ^= LastTime.GetHashCode();
      if (LastTimeInt != 0) hash ^= LastTimeInt.GetHashCode();
      if (ThreadTypes != 0) hash ^= ThreadTypes.GetHashCode();
      if (IsTop != 0) hash ^= IsTop.GetHashCode();
      if (IsGood != 0) hash ^= IsGood.GetHashCode();
      if (IsVote != 0) hash ^= IsVote.GetHashCode();
      if (IsBakan != 0) hash ^= IsBakan.GetHashCode();
      if (IsProtal != 0) hash ^= IsProtal.GetHashCode();
      if (IsMeizhi != 0) hash ^= IsMeizhi.GetHashCode();
      if (IsVoiceThread != 0) hash ^= IsVoiceThread.GetHashCode();
      if (IsActivity != 0) hash ^= IsActivity.GetHashCode();
      if (IsNotice != 0) hash ^= IsNotice.GetHashCode();
      if (author_ != null) hash ^= Author.GetHashCode();
      if (lastReplyer_ != null) hash ^= LastReplyer.GetHashCode();
      if (CommentNum != 0) hash ^= CommentNum.GetHashCode();
      if (MeizhiPic.Length != 0) hash ^= MeizhiPic.GetHashCode();
      if (Fid != 0L) hash ^= Fid.GetHashCode();
      if (Fname.Length != 0) hash ^= Fname.GetHashCode();
      if (LivePostType.Length != 0) hash ^= LivePostType.GetHashCode();
      if (FirstPostId != 0L) hash ^= FirstPostId.GetHashCode();
      if (zan_ != null) hash ^= Zan.GetHashCode();
      if (IsGlobalTop != 0) hash ^= IsGlobalTop.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (RepostNum != 0) hash ^= RepostNum.GetHashCode();
      if (topic_ != null) hash ^= Topic.GetHashCode();
      if (HasCommented != 0) hash ^= HasCommented.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (PostId != 0L) hash ^= PostId.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (IsMembertop != 0) hash ^= IsMembertop.GetHashCode();
      if (AuthorId != 0L) hash ^= AuthorId.GetHashCode();
      if (ValidPostNum != 0) hash ^= ValidPostNum.GetHashCode();
      if (IsLzDeleteAll != 0) hash ^= IsLzDeleteAll.GetHashCode();
      if (IsAd != 0) hash ^= IsAd.GetHashCode();
      if (Ecom.Length != 0) hash ^= Ecom.GetHashCode();
      if (Pids.Length != 0) hash ^= Pids.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (PostNum != 0) hash ^= PostNum.GetHashCode();
      if (CategoryName.Length != 0) hash ^= CategoryName.GetHashCode();
      if (pollInfo_ != null) hash ^= PollInfo.GetHashCode();
      if (IsNovel != 0) hash ^= IsNovel.GetHashCode();
      if (IsNovelThank != 0) hash ^= IsNovelThank.GetHashCode();
      if (IsNovelReward != 0) hash ^= IsNovelReward.GetHashCode();
      if (IsCopythread != 0) hash ^= IsCopythread.GetHashCode();
      if (OperatorFlag != 0) hash ^= OperatorFlag.GetHashCode();
      if (PicNum != 0) hash ^= PicNum.GetHashCode();
      if (IsGodthreadRecommend != 0) hash ^= IsGodthreadRecommend.GetHashCode();
      hash ^= extTails_.GetHashCode();
      if (IsMultiforumThread != 0) hash ^= IsMultiforumThread.GetHashCode();
      if (AgreeNum != 0) hash ^= AgreeNum.GetHashCode();
      if (topAgreePost_ != null) hash ^= TopAgreePost.GetHashCode();
      if (agree_ != null) hash ^= Agree.GetHashCode();
      if (IsPartialVisible != 0) hash ^= IsPartialVisible.GetHashCode();
      if (IsLinkThread != 0) hash ^= IsLinkThread.GetHashCode();
      if (FreqNum != 0L) hash ^= FreqNum.GetHashCode();
      if (IsGod != 0) hash ^= IsGod.GetHashCode();
      if (ShareNum != 0L) hash ^= ShareNum.GetHashCode();
      if (IsShareThread != 0) hash ^= IsShareThread.GetHashCode();
      if (IsTopic != 0) hash ^= IsTopic.GetHashCode();
      if (TopicUserName.Length != 0) hash ^= TopicUserName.GetHashCode();
      if (TopicH5Url.Length != 0) hash ^= TopicH5Url.GetHashCode();
      if (PresentationStyle.Length != 0) hash ^= PresentationStyle.GetHashCode();
      if (TabId != 0) hash ^= TabId.GetHashCode();
      if (TabName.Length != 0) hash ^= TabName.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Tid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Tid);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (ReplyNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReplyNum);
      }
      if (ViewNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ViewNum);
      }
      if (LastTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LastTime);
      }
      if (LastTimeInt != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LastTimeInt);
      }
      if (ThreadTypes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ThreadTypes);
      }
      if (IsTop != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(IsTop);
      }
      if (IsGood != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IsGood);
      }
      if (IsVote != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(IsVote);
      }
      if (IsBakan != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(IsBakan);
      }
      if (IsProtal != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(IsProtal);
      }
      if (IsMeizhi != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(IsMeizhi);
      }
      if (IsVoiceThread != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(IsVoiceThread);
      }
      if (IsActivity != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(IsActivity);
      }
      if (IsNotice != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(IsNotice);
      }
      if (author_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Author);
      }
      if (lastReplyer_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(LastReplyer);
      }
      if (CommentNum != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(CommentNum);
      }
      if (MeizhiPic.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(MeizhiPic);
      }
      if (Fid != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(Fid);
      }
      if (Fname.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Fname);
      }
      if (LivePostType.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(LivePostType);
      }
      if (FirstPostId != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(FirstPostId);
      }
      if (zan_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(Zan);
      }
      if (IsGlobalTop != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(IsGlobalTop);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(CreateTime);
      }
      if (RepostNum != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(RepostNum);
      }
      if (topic_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(Topic);
      }
      if (HasCommented != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(HasCommented);
      }
      if (From.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(From);
      }
      if (PostId != 0L) {
        output.WriteRawTag(160, 3);
        output.WriteInt64(PostId);
      }
      if (Time != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(Time);
      }
      if (IsMembertop != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(IsMembertop);
      }
      if (AuthorId != 0L) {
        output.WriteRawTag(192, 3);
        output.WriteInt64(AuthorId);
      }
      if (ValidPostNum != 0) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(ValidPostNum);
      }
      if (IsLzDeleteAll != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(IsLzDeleteAll);
      }
      if (IsAd != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(IsAd);
      }
      if (Ecom.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(Ecom);
      }
      if (Pids.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(Pids);
      }
      if (location_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(Location);
      }
      if (PostNum != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(PostNum);
      }
      if (CategoryName.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(CategoryName);
      }
      if (pollInfo_ != null) {
        output.WriteRawTag(210, 4);
        output.WriteMessage(PollInfo);
      }
      if (IsNovel != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(IsNovel);
      }
      if (IsNovelThank != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(IsNovelThank);
      }
      if (IsNovelReward != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(IsNovelReward);
      }
      if (IsCopythread != 0) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(IsCopythread);
      }
      if (OperatorFlag != 0) {
        output.WriteRawTag(144, 5);
        output.WriteUInt32(OperatorFlag);
      }
      if (PicNum != 0) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(PicNum);
      }
      if (IsGodthreadRecommend != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(IsGodthreadRecommend);
      }
      extTails_.WriteTo(output, _repeated_extTails_codec);
      if (IsMultiforumThread != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(IsMultiforumThread);
      }
      if (AgreeNum != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(AgreeNum);
      }
      if (topAgreePost_ != null) {
        output.WriteRawTag(234, 7);
        output.WriteMessage(TopAgreePost);
      }
      if (agree_ != null) {
        output.WriteRawTag(242, 7);
        output.WriteMessage(Agree);
      }
      if (IsPartialVisible != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(IsPartialVisible);
      }
      if (IsLinkThread != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(IsLinkThread);
      }
      if (FreqNum != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(FreqNum);
      }
      if (IsGod != 0) {
        output.WriteRawTag(152, 8);
        output.WriteInt32(IsGod);
      }
      if (ShareNum != 0L) {
        output.WriteRawTag(184, 8);
        output.WriteInt64(ShareNum);
      }
      if (IsShareThread != 0) {
        output.WriteRawTag(248, 8);
        output.WriteInt32(IsShareThread);
      }
      if (IsTopic != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(IsTopic);
      }
      if (TopicUserName.Length != 0) {
        output.WriteRawTag(170, 9);
        output.WriteString(TopicUserName);
      }
      if (TopicH5Url.Length != 0) {
        output.WriteRawTag(178, 9);
        output.WriteString(TopicH5Url);
      }
      if (PresentationStyle.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(PresentationStyle);
      }
      if (TabId != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(TabId);
      }
      if (TabName.Length != 0) {
        output.WriteRawTag(130, 11);
        output.WriteString(TabName);
      }
      if (item_ != null) {
        output.WriteRawTag(154, 11);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Tid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Tid);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (ReplyNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReplyNum);
      }
      if (ViewNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ViewNum);
      }
      if (LastTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LastTime);
      }
      if (LastTimeInt != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LastTimeInt);
      }
      if (ThreadTypes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ThreadTypes);
      }
      if (IsTop != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(IsTop);
      }
      if (IsGood != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IsGood);
      }
      if (IsVote != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(IsVote);
      }
      if (IsBakan != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(IsBakan);
      }
      if (IsProtal != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(IsProtal);
      }
      if (IsMeizhi != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(IsMeizhi);
      }
      if (IsVoiceThread != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(IsVoiceThread);
      }
      if (IsActivity != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(IsActivity);
      }
      if (IsNotice != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(IsNotice);
      }
      if (author_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Author);
      }
      if (lastReplyer_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(LastReplyer);
      }
      if (CommentNum != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(CommentNum);
      }
      if (MeizhiPic.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(MeizhiPic);
      }
      if (Fid != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(Fid);
      }
      if (Fname.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Fname);
      }
      if (LivePostType.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(LivePostType);
      }
      if (FirstPostId != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(FirstPostId);
      }
      if (zan_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(Zan);
      }
      if (IsGlobalTop != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(IsGlobalTop);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(CreateTime);
      }
      if (RepostNum != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(RepostNum);
      }
      if (topic_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(Topic);
      }
      if (HasCommented != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(HasCommented);
      }
      if (From.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(From);
      }
      if (PostId != 0L) {
        output.WriteRawTag(160, 3);
        output.WriteInt64(PostId);
      }
      if (Time != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(Time);
      }
      if (IsMembertop != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(IsMembertop);
      }
      if (AuthorId != 0L) {
        output.WriteRawTag(192, 3);
        output.WriteInt64(AuthorId);
      }
      if (ValidPostNum != 0) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(ValidPostNum);
      }
      if (IsLzDeleteAll != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(IsLzDeleteAll);
      }
      if (IsAd != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(IsAd);
      }
      if (Ecom.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(Ecom);
      }
      if (Pids.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(Pids);
      }
      if (location_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(Location);
      }
      if (PostNum != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(PostNum);
      }
      if (CategoryName.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(CategoryName);
      }
      if (pollInfo_ != null) {
        output.WriteRawTag(210, 4);
        output.WriteMessage(PollInfo);
      }
      if (IsNovel != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(IsNovel);
      }
      if (IsNovelThank != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(IsNovelThank);
      }
      if (IsNovelReward != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(IsNovelReward);
      }
      if (IsCopythread != 0) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(IsCopythread);
      }
      if (OperatorFlag != 0) {
        output.WriteRawTag(144, 5);
        output.WriteUInt32(OperatorFlag);
      }
      if (PicNum != 0) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(PicNum);
      }
      if (IsGodthreadRecommend != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(IsGodthreadRecommend);
      }
      extTails_.WriteTo(ref output, _repeated_extTails_codec);
      if (IsMultiforumThread != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(IsMultiforumThread);
      }
      if (AgreeNum != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(AgreeNum);
      }
      if (topAgreePost_ != null) {
        output.WriteRawTag(234, 7);
        output.WriteMessage(TopAgreePost);
      }
      if (agree_ != null) {
        output.WriteRawTag(242, 7);
        output.WriteMessage(Agree);
      }
      if (IsPartialVisible != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(IsPartialVisible);
      }
      if (IsLinkThread != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(IsLinkThread);
      }
      if (FreqNum != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(FreqNum);
      }
      if (IsGod != 0) {
        output.WriteRawTag(152, 8);
        output.WriteInt32(IsGod);
      }
      if (ShareNum != 0L) {
        output.WriteRawTag(184, 8);
        output.WriteInt64(ShareNum);
      }
      if (IsShareThread != 0) {
        output.WriteRawTag(248, 8);
        output.WriteInt32(IsShareThread);
      }
      if (IsTopic != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(IsTopic);
      }
      if (TopicUserName.Length != 0) {
        output.WriteRawTag(170, 9);
        output.WriteString(TopicUserName);
      }
      if (TopicH5Url.Length != 0) {
        output.WriteRawTag(178, 9);
        output.WriteString(TopicH5Url);
      }
      if (PresentationStyle.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(PresentationStyle);
      }
      if (TabId != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(TabId);
      }
      if (TabName.Length != 0) {
        output.WriteRawTag(130, 11);
        output.WriteString(TabName);
      }
      if (item_ != null) {
        output.WriteRawTag(154, 11);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tid);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (ReplyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyNum);
      }
      if (ViewNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewNum);
      }
      if (LastTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastTime);
      }
      if (LastTimeInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTimeInt);
      }
      if (ThreadTypes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadTypes);
      }
      if (IsTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsTop);
      }
      if (IsGood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsGood);
      }
      if (IsVote != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsVote);
      }
      if (IsBakan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBakan);
      }
      if (IsProtal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsProtal);
      }
      if (IsMeizhi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsMeizhi);
      }
      if (IsVoiceThread != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsVoiceThread);
      }
      if (IsActivity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsActivity);
      }
      if (IsNotice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsNotice);
      }
      if (author_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Author);
      }
      if (lastReplyer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastReplyer);
      }
      if (CommentNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CommentNum);
      }
      if (MeizhiPic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MeizhiPic);
      }
      if (Fid != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Fid);
      }
      if (Fname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Fname);
      }
      if (LivePostType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LivePostType);
      }
      if (FirstPostId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FirstPostId);
      }
      if (zan_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Zan);
      }
      if (IsGlobalTop != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsGlobalTop);
      }
      if (CreateTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CreateTime);
      }
      if (RepostNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RepostNum);
      }
      if (topic_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      if (HasCommented != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HasCommented);
      }
      if (From.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (PostId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PostId);
      }
      if (Time != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (IsMembertop != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsMembertop);
      }
      if (AuthorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AuthorId);
      }
      if (ValidPostNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ValidPostNum);
      }
      if (IsLzDeleteAll != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsLzDeleteAll);
      }
      if (IsAd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsAd);
      }
      if (Ecom.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ecom);
      }
      if (Pids.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Pids);
      }
      if (location_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (PostNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PostNum);
      }
      if (CategoryName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CategoryName);
      }
      if (pollInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PollInfo);
      }
      if (IsNovel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsNovel);
      }
      if (IsNovelThank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsNovelThank);
      }
      if (IsNovelReward != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsNovelReward);
      }
      if (IsCopythread != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsCopythread);
      }
      if (OperatorFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OperatorFlag);
      }
      if (PicNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PicNum);
      }
      if (IsGodthreadRecommend != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsGodthreadRecommend);
      }
      size += extTails_.CalculateSize(_repeated_extTails_codec);
      if (IsMultiforumThread != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsMultiforumThread);
      }
      if (AgreeNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AgreeNum);
      }
      if (topAgreePost_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopAgreePost);
      }
      if (agree_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Agree);
      }
      if (IsPartialVisible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsPartialVisible);
      }
      if (IsLinkThread != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsLinkThread);
      }
      if (FreqNum != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FreqNum);
      }
      if (IsGod != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsGod);
      }
      if (ShareNum != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ShareNum);
      }
      if (IsShareThread != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsShareThread);
      }
      if (IsTopic != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsTopic);
      }
      if (TopicUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TopicUserName);
      }
      if (TopicH5Url.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TopicH5Url);
      }
      if (PresentationStyle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PresentationStyle);
      }
      if (TabId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TabId);
      }
      if (TabName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TabName);
      }
      if (item_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Thread other) {
      if (other == null) {
        return;
      }
      if (other.Tid != 0L) {
        Tid = other.Tid;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.ReplyNum != 0) {
        ReplyNum = other.ReplyNum;
      }
      if (other.ViewNum != 0) {
        ViewNum = other.ViewNum;
      }
      if (other.LastTime.Length != 0) {
        LastTime = other.LastTime;
      }
      if (other.LastTimeInt != 0) {
        LastTimeInt = other.LastTimeInt;
      }
      if (other.ThreadTypes != 0) {
        ThreadTypes = other.ThreadTypes;
      }
      if (other.IsTop != 0) {
        IsTop = other.IsTop;
      }
      if (other.IsGood != 0) {
        IsGood = other.IsGood;
      }
      if (other.IsVote != 0) {
        IsVote = other.IsVote;
      }
      if (other.IsBakan != 0) {
        IsBakan = other.IsBakan;
      }
      if (other.IsProtal != 0) {
        IsProtal = other.IsProtal;
      }
      if (other.IsMeizhi != 0) {
        IsMeizhi = other.IsMeizhi;
      }
      if (other.IsVoiceThread != 0) {
        IsVoiceThread = other.IsVoiceThread;
      }
      if (other.IsActivity != 0) {
        IsActivity = other.IsActivity;
      }
      if (other.IsNotice != 0) {
        IsNotice = other.IsNotice;
      }
      if (other.author_ != null) {
        if (author_ == null) {
          Author = new global::TbClient.User();
        }
        Author.MergeFrom(other.Author);
      }
      if (other.lastReplyer_ != null) {
        if (lastReplyer_ == null) {
          LastReplyer = new global::TbClient.User();
        }
        LastReplyer.MergeFrom(other.LastReplyer);
      }
      if (other.CommentNum != 0) {
        CommentNum = other.CommentNum;
      }
      if (other.MeizhiPic.Length != 0) {
        MeizhiPic = other.MeizhiPic;
      }
      if (other.Fid != 0L) {
        Fid = other.Fid;
      }
      if (other.Fname.Length != 0) {
        Fname = other.Fname;
      }
      if (other.LivePostType.Length != 0) {
        LivePostType = other.LivePostType;
      }
      if (other.FirstPostId != 0L) {
        FirstPostId = other.FirstPostId;
      }
      if (other.zan_ != null) {
        if (zan_ == null) {
          Zan = new global::TbClient.Post.Common.Zan();
        }
        Zan.MergeFrom(other.Zan);
      }
      if (other.IsGlobalTop != 0) {
        IsGlobalTop = other.IsGlobalTop;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.RepostNum != 0) {
        RepostNum = other.RepostNum;
      }
      if (other.topic_ != null) {
        if (topic_ == null) {
          Topic = new global::TbClient.Post.Thread.Types.Topic();
        }
        Topic.MergeFrom(other.Topic);
      }
      if (other.HasCommented != 0) {
        HasCommented = other.HasCommented;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.PostId != 0L) {
        PostId = other.PostId;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.IsMembertop != 0) {
        IsMembertop = other.IsMembertop;
      }
      if (other.AuthorId != 0L) {
        AuthorId = other.AuthorId;
      }
      if (other.ValidPostNum != 0) {
        ValidPostNum = other.ValidPostNum;
      }
      if (other.IsLzDeleteAll != 0) {
        IsLzDeleteAll = other.IsLzDeleteAll;
      }
      if (other.IsAd != 0) {
        IsAd = other.IsAd;
      }
      if (other.Ecom.Length != 0) {
        Ecom = other.Ecom;
      }
      if (other.Pids.Length != 0) {
        Pids = other.Pids;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::TbClient.Post.Common.Lbs();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.PostNum != 0) {
        PostNum = other.PostNum;
      }
      if (other.CategoryName.Length != 0) {
        CategoryName = other.CategoryName;
      }
      if (other.pollInfo_ != null) {
        if (pollInfo_ == null) {
          PollInfo = new global::TbClient.Post.Common.PollInfo();
        }
        PollInfo.MergeFrom(other.PollInfo);
      }
      if (other.IsNovel != 0) {
        IsNovel = other.IsNovel;
      }
      if (other.IsNovelThank != 0) {
        IsNovelThank = other.IsNovelThank;
      }
      if (other.IsNovelReward != 0) {
        IsNovelReward = other.IsNovelReward;
      }
      if (other.IsCopythread != 0) {
        IsCopythread = other.IsCopythread;
      }
      if (other.OperatorFlag != 0) {
        OperatorFlag = other.OperatorFlag;
      }
      if (other.PicNum != 0) {
        PicNum = other.PicNum;
      }
      if (other.IsGodthreadRecommend != 0) {
        IsGodthreadRecommend = other.IsGodthreadRecommend;
      }
      extTails_.Add(other.extTails_);
      if (other.IsMultiforumThread != 0) {
        IsMultiforumThread = other.IsMultiforumThread;
      }
      if (other.AgreeNum != 0) {
        AgreeNum = other.AgreeNum;
      }
      if (other.topAgreePost_ != null) {
        if (topAgreePost_ == null) {
          TopAgreePost = new global::TbClient.Post.Reply();
        }
        TopAgreePost.MergeFrom(other.TopAgreePost);
      }
      if (other.agree_ != null) {
        if (agree_ == null) {
          Agree = new global::TbClient.Post.Common.Agree();
        }
        Agree.MergeFrom(other.Agree);
      }
      if (other.IsPartialVisible != 0) {
        IsPartialVisible = other.IsPartialVisible;
      }
      if (other.IsLinkThread != 0) {
        IsLinkThread = other.IsLinkThread;
      }
      if (other.FreqNum != 0L) {
        FreqNum = other.FreqNum;
      }
      if (other.IsGod != 0) {
        IsGod = other.IsGod;
      }
      if (other.ShareNum != 0L) {
        ShareNum = other.ShareNum;
      }
      if (other.IsShareThread != 0) {
        IsShareThread = other.IsShareThread;
      }
      if (other.IsTopic != 0) {
        IsTopic = other.IsTopic;
      }
      if (other.TopicUserName.Length != 0) {
        TopicUserName = other.TopicUserName;
      }
      if (other.TopicH5Url.Length != 0) {
        TopicH5Url = other.TopicH5Url;
      }
      if (other.PresentationStyle.Length != 0) {
        PresentationStyle = other.PresentationStyle;
      }
      if (other.TabId != 0) {
        TabId = other.TabId;
      }
      if (other.TabName.Length != 0) {
        TabName = other.TabName;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::TbClient.Item.Item();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Tid = input.ReadInt64();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 32: {
            ReplyNum = input.ReadInt32();
            break;
          }
          case 40: {
            ViewNum = input.ReadInt32();
            break;
          }
          case 50: {
            LastTime = input.ReadString();
            break;
          }
          case 56: {
            LastTimeInt = input.ReadInt32();
            break;
          }
          case 64: {
            ThreadTypes = input.ReadInt32();
            break;
          }
          case 72: {
            IsTop = input.ReadInt32();
            break;
          }
          case 80: {
            IsGood = input.ReadInt32();
            break;
          }
          case 88: {
            IsVote = input.ReadInt32();
            break;
          }
          case 96: {
            IsBakan = input.ReadInt32();
            break;
          }
          case 104: {
            IsProtal = input.ReadInt32();
            break;
          }
          case 112: {
            IsMeizhi = input.ReadInt32();
            break;
          }
          case 120: {
            IsVoiceThread = input.ReadInt32();
            break;
          }
          case 128: {
            IsActivity = input.ReadInt32();
            break;
          }
          case 136: {
            IsNotice = input.ReadInt32();
            break;
          }
          case 146: {
            if (author_ == null) {
              Author = new global::TbClient.User();
            }
            input.ReadMessage(Author);
            break;
          }
          case 154: {
            if (lastReplyer_ == null) {
              LastReplyer = new global::TbClient.User();
            }
            input.ReadMessage(LastReplyer);
            break;
          }
          case 160: {
            CommentNum = input.ReadInt32();
            break;
          }
          case 194: {
            MeizhiPic = input.ReadString();
            break;
          }
          case 216: {
            Fid = input.ReadInt64();
            break;
          }
          case 226: {
            Fname = input.ReadString();
            break;
          }
          case 234: {
            LivePostType = input.ReadString();
            break;
          }
          case 320: {
            FirstPostId = input.ReadInt64();
            break;
          }
          case 330: {
            if (zan_ == null) {
              Zan = new global::TbClient.Post.Common.Zan();
            }
            input.ReadMessage(Zan);
            break;
          }
          case 336: {
            IsGlobalTop = input.ReadInt32();
            break;
          }
          case 360: {
            CreateTime = input.ReadInt32();
            break;
          }
          case 368: {
            RepostNum = input.ReadInt32();
            break;
          }
          case 378: {
            if (topic_ == null) {
              Topic = new global::TbClient.Post.Thread.Types.Topic();
            }
            input.ReadMessage(Topic);
            break;
          }
          case 384: {
            HasCommented = input.ReadInt32();
            break;
          }
          case 394: {
            From = input.ReadString();
            break;
          }
          case 416: {
            PostId = input.ReadInt64();
            break;
          }
          case 424: {
            Time = input.ReadInt32();
            break;
          }
          case 432: {
            IsMembertop = input.ReadInt32();
            break;
          }
          case 448: {
            AuthorId = input.ReadInt64();
            break;
          }
          case 456: {
            ValidPostNum = input.ReadUInt32();
            break;
          }
          case 464: {
            IsLzDeleteAll = input.ReadUInt32();
            break;
          }
          case 472: {
            IsAd = input.ReadUInt32();
            break;
          }
          case 482: {
            Ecom = input.ReadString();
            break;
          }
          case 490: {
            Pids = input.ReadString();
            break;
          }
          case 498: {
            if (location_ == null) {
              Location = new global::TbClient.Post.Common.Lbs();
            }
            input.ReadMessage(Location);
            break;
          }
          case 552: {
            PostNum = input.ReadInt32();
            break;
          }
          case 586: {
            CategoryName = input.ReadString();
            break;
          }
          case 594: {
            if (pollInfo_ == null) {
              PollInfo = new global::TbClient.Post.Common.PollInfo();
            }
            input.ReadMessage(PollInfo);
            break;
          }
          case 608: {
            IsNovel = input.ReadInt32();
            break;
          }
          case 616: {
            IsNovelThank = input.ReadInt32();
            break;
          }
          case 624: {
            IsNovelReward = input.ReadInt32();
            break;
          }
          case 648: {
            IsCopythread = input.ReadUInt32();
            break;
          }
          case 656: {
            OperatorFlag = input.ReadUInt32();
            break;
          }
          case 672: {
            PicNum = input.ReadUInt32();
            break;
          }
          case 680: {
            IsGodthreadRecommend = input.ReadInt32();
            break;
          }
          case 722: {
            extTails_.AddEntriesFrom(input, _repeated_extTails_codec);
            break;
          }
          case 984: {
            IsMultiforumThread = input.ReadInt32();
            break;
          }
          case 992: {
            AgreeNum = input.ReadInt32();
            break;
          }
          case 1002: {
            if (topAgreePost_ == null) {
              TopAgreePost = new global::TbClient.Post.Reply();
            }
            input.ReadMessage(TopAgreePost);
            break;
          }
          case 1010: {
            if (agree_ == null) {
              Agree = new global::TbClient.Post.Common.Agree();
            }
            input.ReadMessage(Agree);
            break;
          }
          case 1016: {
            IsPartialVisible = input.ReadInt32();
            break;
          }
          case 1024: {
            IsLinkThread = input.ReadInt32();
            break;
          }
          case 1040: {
            FreqNum = input.ReadInt64();
            break;
          }
          case 1048: {
            IsGod = input.ReadInt32();
            break;
          }
          case 1080: {
            ShareNum = input.ReadInt64();
            break;
          }
          case 1144: {
            IsShareThread = input.ReadInt32();
            break;
          }
          case 1184: {
            IsTopic = input.ReadInt32();
            break;
          }
          case 1194: {
            TopicUserName = input.ReadString();
            break;
          }
          case 1202: {
            TopicH5Url = input.ReadString();
            break;
          }
          case 1210: {
            PresentationStyle = input.ReadString();
            break;
          }
          case 1400: {
            TabId = input.ReadInt32();
            break;
          }
          case 1410: {
            TabName = input.ReadString();
            break;
          }
          case 1434: {
            if (item_ == null) {
              Item = new global::TbClient.Item.Item();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Tid = input.ReadInt64();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 32: {
            ReplyNum = input.ReadInt32();
            break;
          }
          case 40: {
            ViewNum = input.ReadInt32();
            break;
          }
          case 50: {
            LastTime = input.ReadString();
            break;
          }
          case 56: {
            LastTimeInt = input.ReadInt32();
            break;
          }
          case 64: {
            ThreadTypes = input.ReadInt32();
            break;
          }
          case 72: {
            IsTop = input.ReadInt32();
            break;
          }
          case 80: {
            IsGood = input.ReadInt32();
            break;
          }
          case 88: {
            IsVote = input.ReadInt32();
            break;
          }
          case 96: {
            IsBakan = input.ReadInt32();
            break;
          }
          case 104: {
            IsProtal = input.ReadInt32();
            break;
          }
          case 112: {
            IsMeizhi = input.ReadInt32();
            break;
          }
          case 120: {
            IsVoiceThread = input.ReadInt32();
            break;
          }
          case 128: {
            IsActivity = input.ReadInt32();
            break;
          }
          case 136: {
            IsNotice = input.ReadInt32();
            break;
          }
          case 146: {
            if (author_ == null) {
              Author = new global::TbClient.User();
            }
            input.ReadMessage(Author);
            break;
          }
          case 154: {
            if (lastReplyer_ == null) {
              LastReplyer = new global::TbClient.User();
            }
            input.ReadMessage(LastReplyer);
            break;
          }
          case 160: {
            CommentNum = input.ReadInt32();
            break;
          }
          case 194: {
            MeizhiPic = input.ReadString();
            break;
          }
          case 216: {
            Fid = input.ReadInt64();
            break;
          }
          case 226: {
            Fname = input.ReadString();
            break;
          }
          case 234: {
            LivePostType = input.ReadString();
            break;
          }
          case 320: {
            FirstPostId = input.ReadInt64();
            break;
          }
          case 330: {
            if (zan_ == null) {
              Zan = new global::TbClient.Post.Common.Zan();
            }
            input.ReadMessage(Zan);
            break;
          }
          case 336: {
            IsGlobalTop = input.ReadInt32();
            break;
          }
          case 360: {
            CreateTime = input.ReadInt32();
            break;
          }
          case 368: {
            RepostNum = input.ReadInt32();
            break;
          }
          case 378: {
            if (topic_ == null) {
              Topic = new global::TbClient.Post.Thread.Types.Topic();
            }
            input.ReadMessage(Topic);
            break;
          }
          case 384: {
            HasCommented = input.ReadInt32();
            break;
          }
          case 394: {
            From = input.ReadString();
            break;
          }
          case 416: {
            PostId = input.ReadInt64();
            break;
          }
          case 424: {
            Time = input.ReadInt32();
            break;
          }
          case 432: {
            IsMembertop = input.ReadInt32();
            break;
          }
          case 448: {
            AuthorId = input.ReadInt64();
            break;
          }
          case 456: {
            ValidPostNum = input.ReadUInt32();
            break;
          }
          case 464: {
            IsLzDeleteAll = input.ReadUInt32();
            break;
          }
          case 472: {
            IsAd = input.ReadUInt32();
            break;
          }
          case 482: {
            Ecom = input.ReadString();
            break;
          }
          case 490: {
            Pids = input.ReadString();
            break;
          }
          case 498: {
            if (location_ == null) {
              Location = new global::TbClient.Post.Common.Lbs();
            }
            input.ReadMessage(Location);
            break;
          }
          case 552: {
            PostNum = input.ReadInt32();
            break;
          }
          case 586: {
            CategoryName = input.ReadString();
            break;
          }
          case 594: {
            if (pollInfo_ == null) {
              PollInfo = new global::TbClient.Post.Common.PollInfo();
            }
            input.ReadMessage(PollInfo);
            break;
          }
          case 608: {
            IsNovel = input.ReadInt32();
            break;
          }
          case 616: {
            IsNovelThank = input.ReadInt32();
            break;
          }
          case 624: {
            IsNovelReward = input.ReadInt32();
            break;
          }
          case 648: {
            IsCopythread = input.ReadUInt32();
            break;
          }
          case 656: {
            OperatorFlag = input.ReadUInt32();
            break;
          }
          case 672: {
            PicNum = input.ReadUInt32();
            break;
          }
          case 680: {
            IsGodthreadRecommend = input.ReadInt32();
            break;
          }
          case 722: {
            extTails_.AddEntriesFrom(ref input, _repeated_extTails_codec);
            break;
          }
          case 984: {
            IsMultiforumThread = input.ReadInt32();
            break;
          }
          case 992: {
            AgreeNum = input.ReadInt32();
            break;
          }
          case 1002: {
            if (topAgreePost_ == null) {
              TopAgreePost = new global::TbClient.Post.Reply();
            }
            input.ReadMessage(TopAgreePost);
            break;
          }
          case 1010: {
            if (agree_ == null) {
              Agree = new global::TbClient.Post.Common.Agree();
            }
            input.ReadMessage(Agree);
            break;
          }
          case 1016: {
            IsPartialVisible = input.ReadInt32();
            break;
          }
          case 1024: {
            IsLinkThread = input.ReadInt32();
            break;
          }
          case 1040: {
            FreqNum = input.ReadInt64();
            break;
          }
          case 1048: {
            IsGod = input.ReadInt32();
            break;
          }
          case 1080: {
            ShareNum = input.ReadInt64();
            break;
          }
          case 1144: {
            IsShareThread = input.ReadInt32();
            break;
          }
          case 1184: {
            IsTopic = input.ReadInt32();
            break;
          }
          case 1194: {
            TopicUserName = input.ReadString();
            break;
          }
          case 1202: {
            TopicH5Url = input.ReadString();
            break;
          }
          case 1210: {
            PresentationStyle = input.ReadString();
            break;
          }
          case 1400: {
            TabId = input.ReadInt32();
            break;
          }
          case 1410: {
            TabName = input.ReadString();
            break;
          }
          case 1434: {
            if (item_ == null) {
              Item = new global::TbClient.Item.Item();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Thread message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Topic : pb::IMessage<Topic>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Topic> _parser = new pb::MessageParser<Topic>(() => new Topic());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Topic> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::TbClient.Post.Thread.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Topic() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Topic(Topic other) : this() {
          isLpost_ = other.isLpost_;
          topicType_ = other.topicType_;
          link_ = other.link_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Topic Clone() {
          return new Topic(this);
        }

        /// <summary>Field number for the "is_lpost" field.</summary>
        public const int IsLpostFieldNumber = 1;
        private int isLpost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int IsLpost {
          get { return isLpost_; }
          set {
            isLpost_ = value;
          }
        }

        /// <summary>Field number for the "topic_type" field.</summary>
        public const int TopicTypeFieldNumber = 2;
        private int topicType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int TopicType {
          get { return topicType_; }
          set {
            topicType_ = value;
          }
        }

        /// <summary>Field number for the "link" field.</summary>
        public const int LinkFieldNumber = 3;
        private string link_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Link {
          get { return link_; }
          set {
            link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Topic);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Topic other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (IsLpost != other.IsLpost) return false;
          if (TopicType != other.TopicType) return false;
          if (Link != other.Link) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (IsLpost != 0) hash ^= IsLpost.GetHashCode();
          if (TopicType != 0) hash ^= TopicType.GetHashCode();
          if (Link.Length != 0) hash ^= Link.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (IsLpost != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(IsLpost);
          }
          if (TopicType != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TopicType);
          }
          if (Link.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Link);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (IsLpost != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(IsLpost);
          }
          if (TopicType != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TopicType);
          }
          if (Link.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Link);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (IsLpost != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsLpost);
          }
          if (TopicType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopicType);
          }
          if (Link.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Topic other) {
          if (other == null) {
            return;
          }
          if (other.IsLpost != 0) {
            IsLpost = other.IsLpost;
          }
          if (other.TopicType != 0) {
            TopicType = other.TopicType;
          }
          if (other.Link.Length != 0) {
            Link = other.Link;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                IsLpost = input.ReadInt32();
                break;
              }
              case 16: {
                TopicType = input.ReadInt32();
                break;
              }
              case 26: {
                Link = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                IsLpost = input.ReadInt32();
                break;
              }
              case 16: {
                TopicType = input.ReadInt32();
                break;
              }
              case 26: {
                Link = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
