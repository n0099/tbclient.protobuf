// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Page.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TbClient {

  /// <summary>Holder for reflection information generated from Page.proto</summary>
  public static partial class PageReflection {

    #region Descriptor
    /// <summary>File descriptor for Page.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpQYWdlLnByb3RvEgh0YkNsaWVudCKRAgoEUGFnZRIRCglwYWdlX3NpemUY",
            "ASABKAUSDgoGb2Zmc2V0GAIgASgFEhQKDGN1cnJlbnRfcGFnZRgDIAEoBRIT",
            "Cgt0b3RhbF9jb3VudBgEIAEoBRISCgp0b3RhbF9wYWdlGAUgASgFEhAKCGhh",
            "c19tb3JlGAYgASgFEhAKCGhhc19wcmV2GAcgASgFEhMKC2N1cl9nb29kX2lk",
            "GAggASgFEg8KB3JlcV9udW0YCSABKAUSDAoEcG51bRgKIAEoBRIMCgR0bnVt",
            "GAsgASgFEhEKCXRvdGFsX251bRgMIAEoBRIWCg5sel90b3RhbF9mbG9vchgN",
            "IAEoBRIWCg5uZXdfdG90YWxfcGFnZRgOIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TbClient.Page), global::TbClient.Page.Parser, new[]{ "PageSize", "Offset", "CurrentPage", "TotalCount", "TotalPage", "HasMore", "HasPrev", "CurGoodId", "ReqNum", "Pnum", "Tnum", "TotalNum", "LzTotalFloor", "NewTotalPage" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Page : pb::IMessage<Page>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Page> _parser = new pb::MessageParser<Page>(() => new Page());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Page> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TbClient.PageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Page() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Page(Page other) : this() {
      pageSize_ = other.pageSize_;
      offset_ = other.offset_;
      currentPage_ = other.currentPage_;
      totalCount_ = other.totalCount_;
      totalPage_ = other.totalPage_;
      hasMore_ = other.hasMore_;
      hasPrev_ = other.hasPrev_;
      curGoodId_ = other.curGoodId_;
      reqNum_ = other.reqNum_;
      pnum_ = other.pnum_;
      tnum_ = other.tnum_;
      totalNum_ = other.totalNum_;
      lzTotalFloor_ = other.lzTotalFloor_;
      newTotalPage_ = other.newTotalPage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Page Clone() {
      return new Page(this);
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 1;
    private int pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "current_page" field.</summary>
    public const int CurrentPageFieldNumber = 3;
    private int currentPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "total_count" field.</summary>
    public const int TotalCountFieldNumber = 4;
    private int totalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "total_page" field.</summary>
    public const int TotalPageFieldNumber = 5;
    private int totalPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalPage {
      get { return totalPage_; }
      set {
        totalPage_ = value;
      }
    }

    /// <summary>Field number for the "has_more" field.</summary>
    public const int HasMoreFieldNumber = 6;
    private int hasMore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HasMore {
      get { return hasMore_; }
      set {
        hasMore_ = value;
      }
    }

    /// <summary>Field number for the "has_prev" field.</summary>
    public const int HasPrevFieldNumber = 7;
    private int hasPrev_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HasPrev {
      get { return hasPrev_; }
      set {
        hasPrev_ = value;
      }
    }

    /// <summary>Field number for the "cur_good_id" field.</summary>
    public const int CurGoodIdFieldNumber = 8;
    private int curGoodId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurGoodId {
      get { return curGoodId_; }
      set {
        curGoodId_ = value;
      }
    }

    /// <summary>Field number for the "req_num" field.</summary>
    public const int ReqNumFieldNumber = 9;
    private int reqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqNum {
      get { return reqNum_; }
      set {
        reqNum_ = value;
      }
    }

    /// <summary>Field number for the "pnum" field.</summary>
    public const int PnumFieldNumber = 10;
    private int pnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Pnum {
      get { return pnum_; }
      set {
        pnum_ = value;
      }
    }

    /// <summary>Field number for the "tnum" field.</summary>
    public const int TnumFieldNumber = 11;
    private int tnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Tnum {
      get { return tnum_; }
      set {
        tnum_ = value;
      }
    }

    /// <summary>Field number for the "total_num" field.</summary>
    public const int TotalNumFieldNumber = 12;
    private int totalNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "lz_total_floor" field.</summary>
    public const int LzTotalFloorFieldNumber = 13;
    private int lzTotalFloor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LzTotalFloor {
      get { return lzTotalFloor_; }
      set {
        lzTotalFloor_ = value;
      }
    }

    /// <summary>Field number for the "new_total_page" field.</summary>
    public const int NewTotalPageFieldNumber = 14;
    private int newTotalPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NewTotalPage {
      get { return newTotalPage_; }
      set {
        newTotalPage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Page);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Page other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageSize != other.PageSize) return false;
      if (Offset != other.Offset) return false;
      if (CurrentPage != other.CurrentPage) return false;
      if (TotalCount != other.TotalCount) return false;
      if (TotalPage != other.TotalPage) return false;
      if (HasMore != other.HasMore) return false;
      if (HasPrev != other.HasPrev) return false;
      if (CurGoodId != other.CurGoodId) return false;
      if (ReqNum != other.ReqNum) return false;
      if (Pnum != other.Pnum) return false;
      if (Tnum != other.Tnum) return false;
      if (TotalNum != other.TotalNum) return false;
      if (LzTotalFloor != other.LzTotalFloor) return false;
      if (NewTotalPage != other.NewTotalPage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      if (TotalPage != 0) hash ^= TotalPage.GetHashCode();
      if (HasMore != 0) hash ^= HasMore.GetHashCode();
      if (HasPrev != 0) hash ^= HasPrev.GetHashCode();
      if (CurGoodId != 0) hash ^= CurGoodId.GetHashCode();
      if (ReqNum != 0) hash ^= ReqNum.GetHashCode();
      if (Pnum != 0) hash ^= Pnum.GetHashCode();
      if (Tnum != 0) hash ^= Tnum.GetHashCode();
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      if (LzTotalFloor != 0) hash ^= LzTotalFloor.GetHashCode();
      if (NewTotalPage != 0) hash ^= NewTotalPage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PageSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageSize);
      }
      if (Offset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Offset);
      }
      if (CurrentPage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentPage);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalCount);
      }
      if (TotalPage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalPage);
      }
      if (HasMore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HasMore);
      }
      if (HasPrev != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HasPrev);
      }
      if (CurGoodId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurGoodId);
      }
      if (ReqNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ReqNum);
      }
      if (Pnum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Pnum);
      }
      if (Tnum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Tnum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalNum);
      }
      if (LzTotalFloor != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LzTotalFloor);
      }
      if (NewTotalPage != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(NewTotalPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PageSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageSize);
      }
      if (Offset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Offset);
      }
      if (CurrentPage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentPage);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalCount);
      }
      if (TotalPage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalPage);
      }
      if (HasMore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HasMore);
      }
      if (HasPrev != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HasPrev);
      }
      if (CurGoodId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurGoodId);
      }
      if (ReqNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ReqNum);
      }
      if (Pnum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Pnum);
      }
      if (Tnum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Tnum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalNum);
      }
      if (LzTotalFloor != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LzTotalFloor);
      }
      if (NewTotalPage != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(NewTotalPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      if (TotalPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPage);
      }
      if (HasMore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HasMore);
      }
      if (HasPrev != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HasPrev);
      }
      if (CurGoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurGoodId);
      }
      if (ReqNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqNum);
      }
      if (Pnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pnum);
      }
      if (Tnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tnum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (LzTotalFloor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LzTotalFloor);
      }
      if (NewTotalPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewTotalPage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Page other) {
      if (other == null) {
        return;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
      if (other.TotalPage != 0) {
        TotalPage = other.TotalPage;
      }
      if (other.HasMore != 0) {
        HasMore = other.HasMore;
      }
      if (other.HasPrev != 0) {
        HasPrev = other.HasPrev;
      }
      if (other.CurGoodId != 0) {
        CurGoodId = other.CurGoodId;
      }
      if (other.ReqNum != 0) {
        ReqNum = other.ReqNum;
      }
      if (other.Pnum != 0) {
        Pnum = other.Pnum;
      }
      if (other.Tnum != 0) {
        Tnum = other.Tnum;
      }
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      if (other.LzTotalFloor != 0) {
        LzTotalFloor = other.LzTotalFloor;
      }
      if (other.NewTotalPage != 0) {
        NewTotalPage = other.NewTotalPage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PageSize = input.ReadInt32();
            break;
          }
          case 16: {
            Offset = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 32: {
            TotalCount = input.ReadInt32();
            break;
          }
          case 40: {
            TotalPage = input.ReadInt32();
            break;
          }
          case 48: {
            HasMore = input.ReadInt32();
            break;
          }
          case 56: {
            HasPrev = input.ReadInt32();
            break;
          }
          case 64: {
            CurGoodId = input.ReadInt32();
            break;
          }
          case 72: {
            ReqNum = input.ReadInt32();
            break;
          }
          case 80: {
            Pnum = input.ReadInt32();
            break;
          }
          case 88: {
            Tnum = input.ReadInt32();
            break;
          }
          case 96: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 104: {
            LzTotalFloor = input.ReadInt32();
            break;
          }
          case 112: {
            NewTotalPage = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PageSize = input.ReadInt32();
            break;
          }
          case 16: {
            Offset = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 32: {
            TotalCount = input.ReadInt32();
            break;
          }
          case 40: {
            TotalPage = input.ReadInt32();
            break;
          }
          case 48: {
            HasMore = input.ReadInt32();
            break;
          }
          case 56: {
            HasPrev = input.ReadInt32();
            break;
          }
          case 64: {
            CurGoodId = input.ReadInt32();
            break;
          }
          case 72: {
            ReqNum = input.ReadInt32();
            break;
          }
          case 80: {
            Pnum = input.ReadInt32();
            break;
          }
          case 88: {
            Tnum = input.ReadInt32();
            break;
          }
          case 96: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 104: {
            LzTotalFloor = input.ReadInt32();
            break;
          }
          case 112: {
            NewTotalPage = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
